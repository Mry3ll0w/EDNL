Practica 2:

1)Sin problemas a priori, simplemente se recorre el arbol y comprobamos que se recorran el mismo numero de veces
  ya que esto los hace similares.
  CODE:
  template <typename t>
  bool similares(Abin<t> &a, Abin<t> &b, typename Abin<t>::nodo n1, typename Abin<t>::nodo n2){

          if (n1!=Abin<t>::NODO_NULO || n2!=Abin<t>::NODO_NULO){
              similares(a,a.hijoIzqdoB(n1));
              similares(b,b.hijoIzqdoB(n2));

              similares(a,a.hijoDrchoB(n1));
              similares(b,b.hijoDrchoB(n2));
          }
          else{
              return false;
          }
          return true;
  }//fallo syntax pero bien

2)No tengo complicacion, ya que simplemente hacemos un swap mediante los elementos de los nodos mientras recorremos todos
los elementos del arbol.
    CODE:
    template <typename t>
    void reflejo(Abin<t>& a,typename Abin<t>::nodo n){
        int parser_element;
        if (n!=Abin<t>::NODO_NULO){
            reflejo(a,a.hijoIzqdoB(n));
            parser_element=a.elemento(a.hijoIzqdoB(n));
            a.insertarHijoDrchoB(a.hijoIzqdoB(n),a.elemento(a.hijoDrchoB(n)));
            a.insertarHijoIzqdoB(a.hijoIzqdoB(n),parser_element);
            reflejo(a,a.hijoDrchoB(n));
        }
    }

3) No he conseguido implementarlo de forma correcta

4) No he conseguido iterpretar el enunciado de forma correcta