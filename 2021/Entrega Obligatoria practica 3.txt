Ejercicio 1)
    Tras multiples intentos con una recursividad llegue a la conclusion que necesitariamos de 3 funciones recursivas:
    - Una que cuente el numero de hijos de cada nodo
    - Otra que realize la llamada a la funcion recursiva
    - Una ultima para realizar el grueso del problema y calcular el maximo de hijos de cada nodo (el grado)
    Codigo:
        template <typename t>
        int counter_hijos(typename Agen<t>::nodo n,Agen<t> tree){
            typename Agen<t>::nodo n_aux=tree.hijoIzqdo(n);
            int node_counter=0;
            while (n_aux!=Agen<t>::NODO_NULO){
                node_counter++;
                n_aux=tree.hermDrcho(n_aux);
            }
            return node_counter;
        }

        template<typename t>
        int grado_nodo_rec(Agen<t>tree,typename Agen<t>:: nodo n){
            int aux_hijos, maxhijos=0;
            typename Agen<t>::nodo n_aux;
            if (n==Agen<t>::NODO_NULO){
                return maxhijos;
            }
            else{
                aux_hijos=counter_hijos(n,tree);
                n_aux=tree.hijoIzqdo(n);
                while (n_aux != Agen<t>::NODO_NULO){
                    maxhijos=std::max(maxhijos,grado_nodo_rec(tree,n_aux));
                    n_aux = tree.hermDrcho(n_aux);//recorre en profundidad
                }
                return std::max(maxhijos,aux_hijos);
            }
        }

        template <typename t>
        int grado_arbol(Agen <t> tree ){
            return grado_nodo_rec(tree,tree.raiz());
        }

Ejercicio 2)
    Sin ningun problema, se realiza de forma similar al arbol binario, puesto que depende del padre del nodo.
    CODIGO:
        template <typename t>
        int profundidad_nodo(Agen<t>tree, typename Agen<t>::nodo n){
            if (n==Agen<t>::NODO_NULO){
                return -1;
            }
            else
                return profundidad_nodo(tree,tree.padre(n))+1;
        }

EJERCICIO 3)
    Para realizar este ejercicio necesitaremos de un algoritmo para calcular la altura de un nodo, para tras esto
    realizar comparaciones con las mismas para asi obtener la altura minima y maxima de un nivel, realizariamos su
    diferencia y asi obtendriamos el desequilibrio del nodo.
    CODIGO:
        template <typename t>
        int altura_nodo(Agen<t>tree, typename Agen<t>::nodo n){
            if (tree.hijoIzqdo(n)==Agen<t>::NODO_NULO){
                return 0;
            }
            else
               return std::max((1+altura_nodo(tree,tree.hijoIzqdo(n))),1+altura_nodo(tree,tree.hermDrcho(tree.hijoIzqdo(n))))+1;
        }
    Tengo un problema con la altura, esta me da nodo nulo en zonas que no deberia y no entiendo el porque

EJERCIO 4) Necesito de la altura y no puedo realizarlo     